{
  "info": {
    "name": "URL Shortener API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "TC04: POST /shorten - valid URL",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{ \"url\": \"https://example.com\" }"
        },
        "url": {
          "raw": "http://localhost:3001/shorten",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3001",
          "path": ["shorten"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Validate that the response status code is 200 OK",
              "pm.test('Status code is 200', () => pm.response.to.have.status(200));",
              "",
              "// Validate presence of shortUrl property in response body",
              "pm.test('Response has shortUrl', () => {",
              "  const json = pm.response.json();",
              "  pm.expect(json.shortUrl).to.exist;",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "TC05: POST /shorten - missing URL",
      "request": {
        "method": "POST",
        "header": [
          { "key": "Content-Type", "value": "application/json" }
        ],
        "body": {
          "mode": "raw",
          "raw": "{}"
        },
        "url": {
          "raw": "http://localhost:3001/shorten",
          "protocol": "http",
          "host": ["localhost"],
          "port": "3001",
          "path": ["shorten"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Validate that the response status code is 400 Bad Request",
              "pm.test('Status code is 400', () => pm.response.to.have.status(400));",
              "",
              "// Validate error message text matches expected output",
              "pm.test('Error message present', () => {",
              "  const json = pm.response.json();",
              "  pm.expect(json.error).to.eql('URL is required');",
              "});"
            ]
          }
        }
      ]
    }
  ]
}
